#!/usr/bin/env tx

# Here we create two locals that can be closed over, but only the first one
# actually is. When "b" goes out of scope, we need to make sure we don't
# prematurely close "a".

var closure: Nil or Fn<<>, Str> = nil;
{
  var a = "a";
  {
    var b = "b";
    fn return_a() -> Str {
      # return a;
      a
    }

    closure = return_a;

    if (false) {
      fn return_b() -> Str {
        # return b;
        b
      }
    }
  }

  std_println((closure as Fn<<>, Str>)()); # expect: a
}
